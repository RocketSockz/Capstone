import { Logger, LoggingLevel } from "../src";

describe("logger", () => {
  function getUnderlyingLogger() {
    return {
      info: jest.fn(),
      warn: jest.fn(),
      error: jest.fn(),
      trace: jest.fn(),
      instrument: jest.fn(),
    };
  }

  /**
   * Info tests
   */
  test("info logs when trace", () => {
    const log = getUnderlyingLogger();
    const logger = new Logger(log, LoggingLevel.trace, LoggingLevel.none);
    logger.info("cool message");
    expect(log.info).toBeCalledWith("cool message");
  });

  test("info logs when info", () => {
    const log = getUnderlyingLogger();
    const logger = new Logger(log, LoggingLevel.info, LoggingLevel.none);
    logger.info("cool message");
    expect(log.info).toBeCalledWith("cool message");
  });

  test("info doesn't log when warn", () => {
    const log = getUnderlyingLogger();
    const logger = new Logger(log, LoggingLevel.warn, LoggingLevel.none);
    logger.info("cool message");
    expect(log.info).not.toBeCalledWith("cool message");
  });

  test("info doesn't log when error", () => {
    const log = getUnderlyingLogger();
    const logger = new Logger(log, LoggingLevel.error, LoggingLevel.none);
    logger.info("cool message");
    expect(log.info).not.toBeCalledWith("cool message");
  });

  test("info doesn't log when instrument", () => {
    const log = getUnderlyingLogger();
    const logger = new Logger(log, LoggingLevel.none, LoggingLevel.none);
    logger.info("cool message");
    expect(log.info).not.toBeCalledWith("cool message");
  });

  /**
   * warn tests
   */
  test("warn logs when trace", () => {
    const log = getUnderlyingLogger();
    const logger = new Logger(log, LoggingLevel.trace, LoggingLevel.none);
    logger.warn("cool message");
    expect(log.warn).toBeCalledWith("cool message");
  });

  test("warn logs when info", () => {
    const log = getUnderlyingLogger();
    const logger = new Logger(log, LoggingLevel.info, LoggingLevel.none);
    logger.warn("cool message");
    expect(log.warn).toBeCalledWith("cool message");
  });

  test("warn logs when warn", () => {
    const log = getUnderlyingLogger();
    const logger = new Logger(log, LoggingLevel.warn, LoggingLevel.none);
    logger.warn("cool message");
    expect(log.warn).toBeCalledWith("cool message");
  });

  test("warn doesn't log when error", () => {
    const log = getUnderlyingLogger();
    const logger = new Logger(log, LoggingLevel.error, LoggingLevel.none);
    logger.warn("cool message");
    expect(log.warn).not.toBeCalledWith("cool message");
  });

  test("warn doesn't log when instrument", () => {
    const log = getUnderlyingLogger();
    const logger = new Logger(log, LoggingLevel.none, LoggingLevel.none);
    logger.warn("cool message");
    expect(log.warn).not.toBeCalledWith("cool message");
  });

  /**
   * Error tests
   */
  test("error logs when trace", () => {
    const log = getUnderlyingLogger();
    const logger = new Logger(log, LoggingLevel.trace, LoggingLevel.none);
    logger.error("cool message");
    expect(log.error).toBeCalledWith("cool message");
  });

  test("error logs when info", () => {
    const log = getUnderlyingLogger();
    const logger = new Logger(log, LoggingLevel.info, LoggingLevel.none);
    logger.error("cool message");
    expect(log.error).toBeCalledWith("cool message");
  });

  test("error logs when warn", () => {
    const log = getUnderlyingLogger();
    const logger = new Logger(log, LoggingLevel.warn, LoggingLevel.none);
    logger.error("cool message");
    expect(log.error).toBeCalledWith("cool message");
  });

  test("error logs when error", () => {
    const log = getUnderlyingLogger();
    const logger = new Logger(log, LoggingLevel.error, LoggingLevel.none);
    logger.error("cool message");
    expect(log.error).toBeCalledWith("cool message");
  });

  test("error doesn't log when instrument", () => {
    const log = getUnderlyingLogger();
    const logger = new Logger(log, LoggingLevel.none, LoggingLevel.none);
    logger.error("cool message");
    expect(log.error).toBeCalledWith("cool message");
  });

  /**
   * Trace tests
   */
  test("trace logs when trace", () => {
    const log = getUnderlyingLogger();
    const logger = new Logger(log, LoggingLevel.trace, LoggingLevel.none);
    logger.trace("cool message");
    expect(log.trace).toBeCalledWith("cool message");
  });

  test("trace doesn't log when info", () => {
    const log = getUnderlyingLogger();
    const logger = new Logger(log, LoggingLevel.info, LoggingLevel.none);
    logger.trace("cool message");
    expect(log.trace).not.toBeCalledWith("cool message");
  });

  test("trace doesn't log when warn", () => {
    const log = getUnderlyingLogger();
    const logger = new Logger(log, LoggingLevel.warn, LoggingLevel.none);
    logger.trace("cool message");
    expect(log.trace).not.toBeCalledWith("cool message");
  });

  test("trace doesn't log when error", () => {
    const log = getUnderlyingLogger();
    const logger = new Logger(log, LoggingLevel.error, LoggingLevel.none);
    logger.trace("cool message");
    expect(log.trace).not.toBeCalledWith("cool message");
  });

  test("trace doesn't log when instrument", () => {
    const log = getUnderlyingLogger();
    const logger = new Logger(log, LoggingLevel.none, LoggingLevel.none);
    logger.trace("cool message");
    expect(log.trace).not.toBeCalledWith("cool message");
  });

  /**
   * Instrument tests with trace instrument level
   */
  test("info logs when trace instrument level", () => {
    const log = getUnderlyingLogger();
    const logger = new Logger(log, LoggingLevel.info, LoggingLevel.trace);
    logger.instrument(LoggingLevel.info, "cool message");
    expect(log.info).toBeCalledWith("cool message");
  });

  test("warn logs when trace instrument level", () => {
    const log = getUnderlyingLogger();
    const logger = new Logger(log, LoggingLevel.warn, LoggingLevel.trace);
    logger.instrument(LoggingLevel.warn, "cool message");
    expect(log.info).toBeCalledWith("cool message");
  });

  test("trace logs when trace instrument level", () => {
    const log = getUnderlyingLogger();
    const logger = new Logger(log, LoggingLevel.trace, LoggingLevel.trace);
    logger.instrument(LoggingLevel.trace, "cool message");
    expect(log.info).toBeCalledWith("cool message");
  });

  /**
   * More instrument tests with info instrument level
   */

  test("info logs when info instrument level", () => {
    const log = getUnderlyingLogger();
    const logger = new Logger(log, LoggingLevel.info, LoggingLevel.info);
    logger.instrument(LoggingLevel.info, "cool message");
    expect(log.info).toBeCalledWith("cool message");
  });

  test("error logs when info instrument level", () => {
    const log = getUnderlyingLogger();
    const logger = new Logger(log, LoggingLevel.error, LoggingLevel.info);
    logger.instrument(LoggingLevel.error, "cool message");
    expect(log.info).toBeCalledWith("cool message");
  });

  test("trace doesn't log when info instrument level", () => {
    const log = getUnderlyingLogger();
    const logger = new Logger(log, LoggingLevel.trace, LoggingLevel.info);
    logger.instrument(LoggingLevel.trace, "cool message");
    expect(log.info).not.toBeCalledWith("cool message");
  });
});