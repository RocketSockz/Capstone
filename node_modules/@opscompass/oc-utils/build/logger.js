"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = exports.LoggingLevel = void 0;
/**
 * Level of logging to write
 */
var LoggingLevel;
(function (LoggingLevel) {
    /**
     * Log everything
     */
    LoggingLevel[LoggingLevel["trace"] = 0] = "trace";
    /**
     * Log info, warnings and errors
     */
    LoggingLevel[LoggingLevel["info"] = 1] = "info";
    /**
     * Log warning and errors only
     */
    LoggingLevel[LoggingLevel["warn"] = 2] = "warn";
    /**
     * Log errors only
     */
    LoggingLevel[LoggingLevel["error"] = 3] = "error";
    /**
     * Don't log anything. for use with instrumentation
     */
    LoggingLevel[LoggingLevel["none"] = 9] = "none";
})(LoggingLevel = exports.LoggingLevel || (exports.LoggingLevel = {}));
/**
 * Write to the log if at the appropriate logging level
 */
var Logger = /** @class */ (function () {
    function Logger(underlyingLogger, loggingLevel, instrumentationLoggingLevel) {
        this.underlyingLogger = underlyingLogger;
        this.loggingLevel = loggingLevel;
        this.instrumentationLoggingLevel = instrumentationLoggingLevel;
    }
    /**
     * Log a trace message
     */
    Logger.prototype.trace = function (message) {
        var _a;
        var additional = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            additional[_i - 1] = arguments[_i];
        }
        if (this.loggingLevel <= LoggingLevel.trace) {
            (_a = this.underlyingLogger).trace.apply(_a, __spreadArray([message], __read(additional), false));
        }
    };
    /**
     * Log an informational message
     */
    Logger.prototype.info = function (message) {
        var _a;
        var additional = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            additional[_i - 1] = arguments[_i];
        }
        if (this.loggingLevel <= LoggingLevel.info) {
            (_a = this.underlyingLogger).info.apply(_a, __spreadArray([message], __read(additional), false));
        }
    };
    /**
     * Log a warning message
     */
    Logger.prototype.warn = function (message) {
        var _a;
        var additional = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            additional[_i - 1] = arguments[_i];
        }
        if (this.loggingLevel <= LoggingLevel.warn) {
            (_a = this.underlyingLogger).warn.apply(_a, __spreadArray([message], __read(additional), false));
        }
    };
    /**
     * Log an error message
     */
    Logger.prototype.error = function (message) {
        var _a;
        var additional = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            additional[_i - 1] = arguments[_i];
        }
        (_a = this.underlyingLogger).error.apply(_a, __spreadArray([message], __read(additional), false));
    };
    /**
     * Log an instrument tagged message
     */
    Logger.prototype.instrument = function (level, message) {
        var _a;
        var additional = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            additional[_i - 2] = arguments[_i];
        }
        if (this.instrumentationLoggingLevel <= level) {
            (_a = this.underlyingLogger).info.apply(_a, __spreadArray([message], __read(additional), false));
        }
    };
    return Logger;
}());
exports.Logger = Logger;
//# sourceMappingURL=logger.js.map