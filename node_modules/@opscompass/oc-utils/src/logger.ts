import { Log } from "./log";

/**
 * Level of logging to write
 */
export enum LoggingLevel {
  /**
   * Log everything
   */
  trace = 0,

  /**
   * Log info, warnings and errors
   */
  info = 1,

  /**
   * Log warning and errors only
   */
  warn = 2,

  /**
   * Log errors only
   */
  error = 3,

  /**
   * Don't log anything. for use with instrumentation
   */
  none = 9,
}

/**
 * Write to the log if at the appropriate logging level
 */
export class Logger implements Log {
  constructor(private underlyingLogger: Log, private loggingLevel: LoggingLevel, private instrumentationLoggingLevel: LoggingLevel) {
  }
  
  /**
   * Log a trace message
   */
  public trace(message?: any, ...additional: any[]): void {
    if (this.loggingLevel <= LoggingLevel.trace) {
      this.underlyingLogger.trace(message, ...additional);
    }
  }

  /**
   * Log an informational message
   */
  public info(message?: any, ...additional: any[]): void {
    if (this.loggingLevel <= LoggingLevel.info) {
      this.underlyingLogger.info(message, ...additional);
    }
  }

  /**
   * Log a warning message
   */
  public warn(message?: any, ...additional: any[]): void {
    if (this.loggingLevel <= LoggingLevel.warn) {
      this.underlyingLogger.warn(message, ...additional);
    }
  }

  /**
   * Log an error message
   */
  public error(message?: any, ...additional: any[]): void {
    this.underlyingLogger.error(message, ...additional);
  }

  /** 
   * Log an instrument tagged message
   */
  public instrument(level: LoggingLevel, message?: any, ...additional: any[]): void {
    if (this.instrumentationLoggingLevel <= level) {
      this.underlyingLogger.info(message, ...additional);
    }
  }
}